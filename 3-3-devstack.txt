devstackでOpenStackを使ってみる
　では最期のdevstackからの言葉の通り、ブラウザでlocalhostにアクセスしてみましょう。（先ほどの結果では192.168.122.13）ログイン画面が出ます。ユーザー名とパスワードはdevstackのログに書いてあります。まぁとりあえずadminユーザーで入ってみましょう。
　ログインできましたか？ここまでくれば、あとはGoogle検索しながら操作できるかと思います。というより、ここまで来てようやく、OpenStackの仕組みや使い方を調べることが意味を持ちます。ここまで来た後の情報はネットに多く転がっているのです。地獄って270個くらいの苦しみがあるみたいですが、全部こなすと、逆に地獄に住めるようになるらしいですよ。


devstack動いてる？

　動いてる？見てみましょう。新しい端末を開いて：
screen -x stack
　お、何か起こりましたね。screenです。screenから説明するのはめんどくさいのでやめます。devstackではOpenStackの各コンポーネントを、このscreenの中で動かすことにより、ログの表示や再起動をしやすくしています。./stack.sh時にstackという名前でセッションを作成するので、そのセッションをattachすればよいというわけです。ちょっとpsしてみましょう：
ps aux -H
　たくさんのプロセスがscreenから生えているのが分かると思います。screenの中で起動し、ログはその各スクリーンに標準出力されます。何かコードを変更し、その動作を確かめるときには各スクリーンでおもむろにCtrl-CでプロセスをKillし、上カーソルで同じ起動コマンドをもう一度叩けば、再度プロセスが起動します。開発にはとても便利な環境です。試しにHorizonのログを見ながらブラウザからHorizonを操作してみましょう。ログがどどっと流れていき、通信される他のコンポーネントのログも同時に流れているのが見えると思います。
　また、他にも多くのサービスが知らない内に起動していると思います。MySQLやRabbitMQ、OpenVSwitchなどだと思いますが、これらはOpenStackを動かす際に必要となる外部システムです。MySQLはメタデータの永続化、RabbitMQはメッセージキュー、OpenVSwitchはNeutronが依存しています。これらも./stack.sh時に自動でインストールされ、自動的に起動します。また、テストデータも投入済みとなっています。

devstackの中身

まず、devstackは巨大なbashスクリプトの集合体です。そして、devstackには多くの設定項目が存在します。しかし、そのほとんどには適切なデフォルト値が設定されています。そのため、特に設定を変更せずとも、それなりに動くようになりますが、2つ問題があります。デフォルトでは起動されないコンポーネントがあることと、デフォルトの値では結構なスペックが必要となることです。たとえば、以下のように設定ファイルを書くと、devstackで起動できるすべてのコンポーネントを起動することができます。

enable_service tempest
enable_service ceilometer ceilometer-acompute ceilometer-acentral ceilometer-anotification ceilometer-collector ceilometer-api
enable_service s-proxy s-object s-container s-account
enable_service trove tr-api tr-tmgr tr-cond
enable_service sahara
enable_service zaqar-server
disable_service heat h-eng h-api h-api-cfn h-api-cw 
tempestは結合テスト、ceilometerはリソース使用量の解析、s-で始まるのはオブジェクトストレージサービスのSwift、troveはデータベースサービス、saharaはHadoopクラスタをデプロイする機能、zaqarはキューイングサービス、heatはサーバーのオーケストレーションです。これらを全部起動するとどうなるかと言うと、ものっすごいメモリを消費します。8GBくらいは欲しいですね。
　他にも便利な設定値があります
RECLONE=yes
　RECLONEは、devstack起動時に最新のソースコードを毎回cloneしてくるか否かです。yesにすると、./stack.shを実行するたびに本家のリポジトリからソースコードをcloneしてきます。常に最新の機能を使うことができますが、まぁこれはOpenStackそのものの開発者しか必要ないでしょう。とはいえ、最新のログを追うのもコミュニティの息づかいを感じることができて楽しいものです。ほら、あれだよ。デグレったりとかさ。
VOLUME_BACKING_FILE_SIZE=1G
　Cinderのvolume用に作成されるファイルのサイズなのですが、これがまたデフォルトではデカいんだな。devstack起動するだけで急にディスクの使用率が上がったりします。1Gもあればお試しには十分じゃないのかなぁ。dfと話し合って決めてください。
SCREEN_HARDSTATUS='%{= .b}%-Lw%{=b .r}%>%n%f %t*%{= .b}%+Lw%< %-=%{g}(%{d}%H/%l%{g})'
デフォルトのScreenのステータスバーがちょっと見にくい。この変数で変えることができます。.screenrcを書いておけばプレフィックスキーなども変更することができます。が、 hardstatusは上書かれてしまうようです。
ENABLE_HTTPD_MOD_WSGI_SERVICES=False
さきほどのpsの出力をよく見てみましょう。実は、Horizonはapacheでリクエストを受け、mod_wsgiを使って処理をするWebアプリケーションとして起動しています。そして、Keystoneも同様の起動スタイルをしています。やたらApacheからプロセス生えてますね。Keystoneの動作確認やパッチ当て等の開発をしている時には、そのたびにApacheの再起動が必要になってしまいます。それはまぁ無駄といえば無駄なので、このオプションでapacheで受けないようにすることができます。まぁこれも開発用途と言えるでしょう。
　ところで、これらの設定項目ってどこに書いてあると思いますか？はい、正解です！そう、ソースコードです。「これ不便だな。変えたいな。」って思ったら、grepかけてみましょう。何か見つかるでしょう。

devstackメモ

Fedora、またお前か

Fedoraにはいつものことですが、パッケージが壊れてます。Fedora 21 Serverのbetaでdevstack走らせてみると、pcre-develとpcreの依存が壊れてます。
% sudo yum install pcre-devel
読み込んだプラグイン:langpacks
依存性の解決をしています
--> トランザクションの確認を実行しています。
---> パッケージ pcre-devel.x86_64 0:8.35-7.fc21 を インストール
--> 依存性の処理をしています: pcre(x86-64) = 8.35-7.fc21 のパッケージ: pcre-devel-8.35-7.fc21.x86_64
--> 依存性解決を終了しました。
エラー: パッケージ: pcre-devel-8.35-7.fc21.x86_64 (fedora)
             要求: pcre(x86-64) = 8.35-7.fc21
            インストール: pcre-8.35-8.fc21.x86_64 (@updates-testing)
                pcre(x86-64) = 8.35-8.fc21
            利用可能: pcre-8.35-7.fc21.x86_64 (fedora)
                pcre(x86-64) = 8.35-7.fc21
 問題を回避するために --skip-broken を用いることができます。
 これらを試行できます: rpm -Va --nofiles --nodigest
betaだし、こんなことで心折れていてはいけません。リラダンの『未来のイヴ』を読む方がよっぽど大変ですよ。あれは大変でした。まぁとりあえず即座に：
yum downgrade pcre

Cenlometer試してみたらディスクフルで天使が見えた

　devstackはCeilomerterもサポートしています。で、Ceilometerは計測データの保管にmongodbを使うのですが、mongodbは起動時に各データベースごと5GBのディスクを確保しようとします。CeilometerはDBを3つ必要としますので、あら大変、15GBも消費されてしまうことになります。Ceilometerを試す際には、/etc/mongodb.confに以下を追記し、大きなファイルを作成しないようにしておきましょう。

smallfiles = true

Oh, Proxy.

あぁ、Proxyですね。ソースコードをCloneしてくるのにgitプロトコルを使うのですが、これを変えたい時はinstead of設定をしましょう。というのはすぐ思いつくのですが、--systemオプションでユーザーの設定に依存しないところまで広く設定しておきましょう。devstackはカレントユーザーのgit設定は読みません。

OSのセットアップについて

何をもってしてLinuxのインストールが終わったか、というのは人によるでしょう。ここでは、インストーラーでの作業が終了し、パッケージのアップデートが終わっている状態とします。(apt-get update && apt-get upgrade, yum update, dnf upgrade)普通は他にもやりたいことがあるかと思います。(vim, emacs, zsh, screen, tmux, tig ...)執筆時には以下をインストールしました：vim zsh tmux tig

ホストサーバーのリソースについて

Fedora 21 ServerにはCockpitというサーバーリソース管理サービスがデフォルトでインストールされています。有効化はされていないので、以下で起動を指定し、9090ポートをWebブラウザで開くと、リソース使用状況を綺麗なページで見ることができます。まぁ、出来はまだまだですが。

systemctl start cockpit

CPU、メモリ、ディスク、ネットワーク、起動中のサービスなどの基本情報に加えて、ユーザー情報、Dockerサービス、Dockerコンテナ、journalctlなんかもWebから見ることができます。