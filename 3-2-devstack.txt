devstackを使ってみる

まずLinuxが必要です。devstackのコードを見るとサポートされているディストリビューションは、

Fedora21とUbuntu14.04で試してみましょう。執筆時点ではUbuntu14.10はサポート外でした。mariadb-serverを使わない点や、openswanが14.04のリポジトリに無いことなど、があります。FedoraはServer, Workstationどちらでもよいと思います。今回はFedora Server 21 betaを使用しました。Serverはyum、Workstationはdnf。Serverでdnfって打ったら、そんなコマンド無いって言われたよ。

Development Tools
zsh vim tmux

ディストリビューションのインストールに関しては割愛します。ファイルシステムは？ネットワークインターフェースは？カーネルのパラメータは？IntelVT効いてないとだめじゃない？

スペックは大きめにしておく必要があります。僕はRAM4GB 4Cores 32GB Btrfsで開発していますが、ギリギリです。最低限のコンポーネントを起動させておくには問題ありませんが、devstackがサポートするすべてのコンポーネントを同時に起動させておくには8GBほど用意しておくほうがよいでしょう。

Linuxのインストールが終わったら、まずはdevstackを取得してみましょう。devstackは残念ながらパッケージでは用意されていません。Cloneしてくる必要があります。

git clone

え？Gitが無いって？貴方Ubuntuユーザーですね？Ubuntuはいつだってそうでした。

apt-get install build-essentials

あ、そもそもネットワークが繋がってないです？それは知りません。ますはFlets光とかでググってみましょう。ああそうかネット繋がってないのか。じゃあ諦めましょう。それは創造のチャンスです。ネットワークアクセスが無くても、OpenStackの意義は、どこかにあるはずです。そうでないなら、さっさとLanケーブルなりWiFiなりにつなぎましょう。もうDHCPでいいですよ。それでも動きます。

devstackディレクトリをlsしてみましょう。ええ、何が何だかわかりませんね。ドキュメントにはlocalrcを書いてstack.shしろって言ってますが、all_in_oneとそうじゃないのとが書いてあったり、VMとMachineで違ったり、何かIPレンジ決めろとか書いてあるし、やる気なくなりますね。でも大丈夫、必要ありません。しかし、設定ファイルは必要です。それがlocalrcというファイルです。ありますか？ありませんね。そう自分で作らないといけません。ひな形ぐらい用意しておいて欲しいですね。例えば以下のように書いてみましょう

disable_service n-net
enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta

この設定が何かと言いますと、nova-networkを無効化して、代わりにNeutronを有効化しています。#で始まる行はコメントです。勘のいい方は気付くかと思いますが、そうです、これはシェルスクリプトです。disable_service/enable_serviceはBashの関数です。

暗号かよ。disable/enableはなんとなくわかるけど…それならenable_neutronとかじゃないの？enable_service neutronとか？

いい質問ですね。いろいろ回答できるいい質問です。かつて、VMのネットワーク管理をする部分はnova-networkとしてnovaの一部分として組み込まれていました。ところが、ネットワーク大好きレガシーおじさん達のせいで、どんどんネットワーク周辺のコードが肥大化し、ついにnovaの一機能からquantumという名で独立し、個別にネットワークの機能を拡張していくことになりました。そのquantumも成熟し、ついにOpenStackの中核を成すコンポーネントに成長し、Neutronと名を変え、OpenStack内屈指の難解コンポーネントになったのでした。

もうおわかりですね。n-netはnova-networkのことです。これは古き良きものなのでdisableします。かわりにenable_service neutronします。neutronを構成するサブコンポーネントの起動もします。q-*がそれです。qとは？そう、旧名のquantumのことです。え、nじゃねーの？だってそりゃ、nじゃnovaと被るじゃん。

……やってられませんね。人間味溢れるシステム、それがOpenStackなのです。初心者お断りです。

さて上の２行を書いたらあとは./stack.shするだけです。それがいけないのか、それだけのことだからいけないのか。

memo

devstackはCeilomerterもサポートしています。計測データの保管にmongodbを使うのですが、mongodbは起動時に各データベースごと5GBのディスクを確保しようとします。CeilometerはDBを3つ必要としますので、15GBも消費されてしまうことになります。Ceilometerを試す際には、/etc/mongodb.confに以下を追記し、大きなファイルを作成しないようにしておきましょう。

smallfiles = true

proxy

instead of gitは--systemで

何をもってしてLinuxのインストールが終わったか、というのは人によるでしょう。ここでは、インストーラーでの作業が終了し、パッケージのアップデートが終わっている状態とします。(apt-get update && apt-get upgrade, yum update, dnf upgrade)普通は他にもやりたいことがあるかと思います。(vim, emacs, zsh, screen, tmux...)

devstackを動かしたい

ところでdevstackが何をやっているかと言いますと、OpenStackの公式GitリポジトリからソースコードをCloneしてきて、必要なPythonパッケージのインストールをし、設定ファイル自動生成し、コンポーネントを順番に起動していきます。起動したら、テスト用の初期データの投入や、テスト用のOSイメージファイルなどのダウンロード・登録をします。つまり、OpenStackが何となく動く状態にまで持っていってくれます。localrcも書いたし、とりあえずstack.shを実行してみましょう。pwdはdevstackです。

./stack.rc

延々とメッセージが出ますね。何をやっているかはあとで説明するとして、ちょっと待ってみましょう。何か聞かれませんか？

OpenStackは必要なデータを保存しておくシステムとして、データベースシステムを必要とします。MySQLでもsqliteでもpostgresqlでも（たぶん）いいのですが、devstackはMySQLを使おうとします。つまり、勝手にインストールします。そして、勝手に起動します。（自動起動はしない。）ます聞かれるのは、このデータベースのrootパスワードです。

devstack動いてる？

動いてる？見てみましょう。新しい端末を開いて、

screen -x stack

お、何か起こりましたね。Screenです。Screen？そこから説明するのはめんどくさいのでやめます。

devstackにおいて、OpenStackの各コンポーネントはscreenの中で動きます。psしてみましょう。
上のstackという名前でセッションができるので、

devstack詳解

devstackには多くの設定項目が存在します。しかし、そのほとんどには適切なデフォルト値が設定されています。そのため、特に設定を変更せずとも、それなりに動くようになります。問題は、デフォルトでは起動されないコンポーネントがあります。たとえば、以下のように設定ファイルを書くと、devstackで起動できるすべてのコンポーネントを起動することができます。

enable_service tempest
enable_service ceilometer ceilometer-acompute ceilometer-acentral ceilometer-anotification ceilometer-collector ceilometer-api
enable_service s-proxy s-object s-container s-account
enable_service trove tr-api tr-tmgr tr-cond
enable_service sahara
enable_service zaqar-server
disable_service heat h-eng h-api h-api-cfn h-api-cw 

tempestは結合テスト、ceilometerはOpenStack環境のリソース使用の解析、s-*はオブジェクトストレージシステムのSwift、troveはデータベースサービス。saharaはHadoopクラスタを提供する機能、zaqarはキューイングサービス、heatはサーバーのオーケストレーションです。これ全部起動するとどうなるかと言うと、ものっすごいメモリを消費します。８GBくらいは欲しいですね。

他にも便利な設定値があります

RECLONE=yes
VOLUME_BACKING_FILE_SIZE=16M
SCREEN_HARDSTATUS='%{= .b}%-Lw%{=b .r}%>%n%f %t*%{= .b}%+Lw%< %-=%{g}(%{d}%H/%l%{g})'
ENABLE_HTTPD_MOD_WSGI_SERVICES=False 

RECLONEは、devstack起動時に最新のソースコードを毎回Cloneしてくるか否か。