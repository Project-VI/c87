3節devstackでOpenStackを使ってみる
　では最期のdevstackからの言葉の通り、ブラウザでlocalhostにアクセスしてみましょう。（先ほどの結果では192.168.122.13）ログイン画面が出ます。ユーザー名とパスワードは、devstackのログに書いてあります。まぁとりあえずadminで入ってみましょう。はいれましたか？ここまでくれば、あとはGoogle検索しながら操作できるかと思います。というより、ここまで来てようやく、OpenStackの仕組みや使い方を調べることが意味を持ちます。地獄って270位の苦しみがあるみたいですが、全部こなすと、逆に地獄に住めるようになるらしいです。

devstack動いてる？

　動いてる？見てみましょう。新しい端末を開いて：
screen -x stack
　お、何か起こりましたね。Screenです。Screen？そこから説明するのはめんどくさいのでやめます。devstackでは、OpenStackの各コンポーネントをこのscreenの中で動かすことで、ログや再起動をしやすくしています。stackという名前でセッションを作成するので、そのセッションをattachすればよいというわけです。ちょっとpsしてみましょう：
ps aux -H
　たくさんのプロセスがScreenから生えているのが分かると思います。Screenの中で起動し、ログはその各スクリーンに標準出力されます。何かコードを変更し、その動作を確かめるときには各スクリーンでおもむろにCtrl-CでプロセスをKillし、上カーソルで同じ起動コマンドをもう一度叩けば、再度プロセスが起動します。開発にはとても便利な環境です。試しにHorizonのログを見ながらブラウザからHorizonを操作してみましょう。ログがどどっと流れていき、通信される他のコンポーネントのログも同時に流れているのが見えると思います。

devstackの中身

　まず、devstackは巨大なBashスクリプトの集合体です。そして、devstackには多くの設定項目が存在します。しかし、そのほとんどには適切なデフォルト値が設定されています。そのため、特に設定を変更せずとも、それなりに動くようになりますが、２つ問題があります。デフォルトでは起動されないコンポーネントがあることと、あとデフォルトの値では結構なスペックが必要となることです。たとえば、以下のように設定ファイルを書くと、devstackで起動できるすべてのコンポーネントを起動することができます。
enable_service tempest
enable_service ceilometer ceilometer-acompute ceilometer-acentral ceilometer-anotification ceilometer-collector ceilometer-api
enable_service s-proxy s-object s-container s-account
enable_service trove tr-api tr-tmgr tr-cond
enable_service sahara
enable_service zaqar-server
disable_service heat h-eng h-api h-api-cfn h-api-cw 
tempestは結合テスト、ceilometerはOpenStack環境のリソース使用の解析、s-*はオブジェクトストレージシステムのSwift、troveはデータベースサービス。saharaはHadoopクラスタを提供する機能、zaqarはキューイングサービス、heatはサーバーのオーケストレーションです。これらを全部起動するとどうなるかと言うと、ものっすごいメモリを消費します。８GBくらいは欲しいですね。
　他にも便利な設定値があります
RECLONE=yes
　RECLONEは、devstack起動時に最新のソースコードを毎回Cloneしてくるか否かです。yesにすると、stack.shを実行するたびに本家のリポジトリからソースコードをCloneしてきます。常に最新の機能を使うことができますが、まぁこれはOpenStackそのものの開発者しか必要ないでしょう。とはいえ、最新のログを追うのもコミュニティの息づかいを感じることができて楽しいものです。ほら、あれだよ。デグレったりとかさ。
VOLUME_BACKING_FILE_SIZE=16M
　Swiftのバックアップファイルの作成なのですが、これがまたデフォルトではデカいんだな。devstack起動するだけで急にディスクの使用率が上がったりします。１６Mもあれば十分じゃないかなぁ。
SCREEN_HARDSTATUS='%{= .b}%-Lw%{=b .r}%>%n%f %t*%{= .b}%+Lw%< %-=%{g}(%{d}%H/%l%{g})'
　デフォルトのScreenのステータスバーがちょっと見にくい。この変数で変えることができます。
ENABLE_HTTPD_MOD_WSGI_SERVICES=False
　さきほどのpsの出力をよく見てみましょう。実は、Horizonはapacheでリクエストを受けるWebアプリケーションとして起動しています。そして、Keystoneも同様の起動スタイルをしています。keystoneの動作確認や、パッチ当て等の開発をしている時には、そのたびにApacheの再起動が必要になってしまいます。それはまぁ無駄なので、このオプションでapacheで受けないようにすることができます。まぁこれも開発用途と言えるでしょう。

これらの設定項目って、どこに書いてあると思いますか？はい、正解です！そう、ソースコードです。「これ不便だな。変えたいな。」って思ったら、grepかけてみましょう。何か見つかるでしょう。

devstackメモ

Fedora、またお前か

　Fedoraにはいつものことですが、パッケージが壊れてます。Fedora 21 Serverでdevstack走らせてみると、pcre-develとpcreの依存が壊れてます。
% sudo yum install pcre-devel
読み込んだプラグイン:langpacks
依存性の解決をしています
--> トランザクションの確認を実行しています。
---> パッケージ pcre-devel.x86_64 0:8.35-7.fc21 を インストール
--> 依存性の処理をしています: pcre(x86-64) = 8.35-7.fc21 のパッケージ: pcre-devel-8.35-7.fc21.x86_64
--> 依存性解決を終了しました。
エラー: パッケージ: pcre-devel-8.35-7.fc21.x86_64 (fedora)
             要求: pcre(x86-64) = 8.35-7.fc21
            インストール: pcre-8.35-8.fc21.x86_64 (@updates-testing)
                pcre(x86-64) = 8.35-8.fc21
            利用可能: pcre-8.35-7.fc21.x86_64 (fedora)
                pcre(x86-64) = 8.35-7.fc21
 問題を回避するために --skip-broken を用いることができます。
 これらを試行できます: rpm -Va --nofiles --nodigest
　こんなことで心折れていてはいけません。リラダンの『未来のイヴ』読む方がよっぽど大変ですよ。あれは大変でした。まぁとりあえず即座に：
yum downgrade pcre

ディスク容量が急激に減った人は

　devstackはCeilomerterもサポートしています。で、Ceilometerは計測データの保管にmongodbを使うのですが、mongodbは起動時に各データベースごと5GBのディスクを確保しようとします。CeilometerはDBを3つ必要としますので、あら大変、15GBも消費されてしまうことになります。Ceilometerを試す際には、/etc/mongodb.confに以下を追記し、大きなファイルを作成しないようにしておきましょう。
smallfiles = true

Oh, Proxy.

あぁ、Proxyですね。ソースコードをCloneしてくるのにgitプロトコルを使うのですが、これを変えたい時はgitのinstead of設定をしましょう。というのはすぐ思いつくのですが、--systemオプションでユーザーの設定に依存しないところまで広く設定しておきましょう。devstackはカレントユーザーのgit設定は読みません。

OSのセットアップについて

　何をもってしてLinuxのインストールが終わったか、というのは人によるでしょう。ここでは、インストーラーでの作業が終了し、パッケージのアップデートが終わっている状態とします。(apt-get update && apt-get upgrade, yum update, dnf upgrade)普通は他にもやりたいことがあるかと思います。(vim, emacs, zsh, screen, tmux, tig ...)執筆時には以下をインストールしました
vim zsh tmux tig

ホストサーバーのリソースについて

　Fedora21 ServerにはCockpitというサーバーリソース管理サービスがデフォルトでインストールされています。有効化はされていないので、以下で起動を指定し、9090ポートをWebブラウザで開くと、リソース使用状況を綺麗なページで見ることができます。まぁ、出来はまだまだですが。
systemctl start cockpit
　CPU、メモリ、ディスク、ネットワーク、起動中のサービスなどの基本情報に加えて、ユーザー情報、Dockerサービス、Dockerコンテナ、journalctlなんかもWebから見ることができます。