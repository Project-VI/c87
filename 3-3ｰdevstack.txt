OpenStackを使ってみる

では最期のdevstackからの言葉の通り、ブラウザでlocalhostにアクセスしてみましょう。（先ほどの結果では192.168.122.13）

画像

ログイン画面です。ユーザー名とパスワードは、devstackのログに書いてあります。まぁとりあえずadminで入ってみましょう。

はいれましたか？ここまでくれば、あとはGoogle検索しながら操作できるかと思います。というより、ここまで来てようやく、OpenStackの仕組みや使い方を調べることが意味を持ちます。

devstack動いてる？

動いてる？見てみましょう。新しい端末を開いて：

screen -x stack

お、何か起こりましたね。Screenです。Screen？そこから説明するのはめんどくさいのでやめます。devstackにおいては、OpenStackの各コンポーネントはこのscreenの中で動きます。psしてみましょう。上のstackという名前でセッションができるので、

ps aux -H

たくさんのプロセスがScreenから生えているのが分かると思います。Screenの中で起動し、ログはその各スクリーンに標準出力されます。何かコードを変更し、その動作を確かめるときには各スクリーンでおもむろにCtrl-CでプロセスをKillし、上カーソルで同じ起動コマンドをもう一度叩けば、再度プロセスが起動します。開発にはとても便利な環境です。試しにHorizonのログを見ながらブラウザからHorizonを操作してみましょう。ログがどどっと流れていき、通信される他のコンポーネントのログも同時に流れているのが見えると思います。

devstack詳解

まず、devstackは巨大なBashスクリプトの集合体です。devstackには多くの設定項目が存在します。しかし、そのほとんどには適切なデフォルト値が設定されています。そのため、特に設定を変更せずとも、それなりに動くようになりますが、２つ問題があります。デフォルトでは起動されないコンポーネントがあることと、あとデフォルトの値では結構なスペックが必要となることです。たとえば、以下のように設定ファイルを書くと、devstackで起動できるすべてのコンポーネントを起動することができます。

enable_service tempest
enable_service ceilometer ceilometer-acompute ceilometer-acentral ceilometer-anotification ceilometer-collector ceilometer-api
enable_service s-proxy s-object s-container s-account
enable_service trove tr-api tr-tmgr tr-cond
enable_service sahara
enable_service zaqar-server
disable_service heat h-eng h-api h-api-cfn h-api-cw 

tempestは結合テスト、ceilometerはOpenStack環境のリソース使用の解析、s-*はオブジェクトストレージシステムのSwift、troveはデータベースサービス。saharaはHadoopクラスタを提供する機能、zaqarはキューイングサービス、heatはサーバーのオーケストレーションです。これ全部起動するとどうなるかと言うと、ものっすごいメモリを消費します。８GBくらいは欲しいですね。

他にも便利な設定値があります

RECLONE=yes

RECLONEは、devstack起動時に最新のソースコードを毎回Cloneしてくるか否かです。yesにすると、stack.shを実行するたびに本家のリポジトリからソースコードをCloneしてきます。常に最新の機能を使うことができますが、まぁこれはOpenStackそのものの開発者しか必要ないでしょう。とはいえ、最新のログを追うのもコミュニティの息づかいを感じることができて楽しいものです。ほら、あれだよ。デグレったりとかさ。

VOLUME_BACKING_FILE_SIZE=16M

Swiftのバックアップファイルの作成なのですが、これがまたデフォルトではデカいんだな。devstack起動するだけで急にディスクの使用率が上がったりします。１６Mもあれば十分です。

SCREEN_HARDSTATUS='%{= .b}%-Lw%{=b .r}%>%n%f %t*%{= .b}%+Lw%< %-=%{g}(%{d}%H/%l%{g})'

devstackはScreenのプロセスとして起動します。が、デフォルトのステータスバーはちょっと見にくい時は、この変数で変えることができます。

ENABLE_HTTPD_MOD_WSGI_SERVICES=False 

psの出力をよく見てみましょう。実は、Horizonはapacheでリクエストを受けるWebアプリケーションとして起動しています。そして、Keystoneも同様の起動スタイルをしています。keystoneの動作確認や、パッチ当て等の開発をしている時には、そのたびにApacheの再起動が必要になってしまいます。それはまぁ無駄なので、このオプションでapacheで受けないようにすることができます。まぁこれも開発用途と言えるでしょう。