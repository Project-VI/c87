　ブート時のインスタンスの設定

　config_drive

　インスタンスをブートする際に、そのインタンスに対してメタデータを書き込んだ特別な設定用ドライブをアタッチしてOpenStackの設定を行うことができます。その際、アタッチする設定用仮想ドライブをコンフィグドライブと呼びます。インスタンスはこのドライブをマウントしてファイルを読み情報を取得することが可能です。例えば、インスタンスへIPアドレスを割り当てる際にDHCPを使用しない場合、ネットワーク設定が書き込まれているメタデータファイルをコンフィグドライブとしてマウントして固定IPアドレスの設定をすることができます。コンフィグドライブは、インスタンスにネットワーク設定を施す前にマウントしてメタデータへのアクセスが可能になるが故、IPアドレスの設定が可能になるのです。

　cloud-init

　コンフィグドライブから情報を取得し、ブート時にインスタンスの設定を行う際、cloud-initとの連携が必要になります。cloud-initはOpenStack固有のテクノロジーではありません。マシンイメージをマルチクラウド上に展開することができるようにするため、複数のクラウドサービスをサポートできるように設計されています。

　インストール
1. RHEL6/CentOS6
rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
yum install cloud-init
2. Ubuntu/Debian
apt-get install cloud-init

　実用例

　cloud-initを利用することでインスタンスの起動時に任意スクリプトを実行することができます。
　例としてGlanceイメージからNovaでインスタンスをブートする際に固定IPを設定する手順を紹介します。まず、設定ファイルの以下の項目を追記します。
# cat /etc/cloud/cloud.cfg
cloud_final_modules:
- scripts-per-once
- scripts-per-boot
- scripts-per-instance

　追加した内容は下記となります。
scripts-per-once
"/var/lib/cloud/scripts/per-once/"以下のスクリプトを実行
* 初回起動時に実行 (OpenStack環境ではユーザが独自イメージを作成する際に実行される)

scripts-per-boot
"/var/lib/cloud/scripts/per-boot/"以下のスクリプトを実行
* リブート時に実行

scripts-per-instance
"/var/lib/cloud/scripts/per-instance/"以下のスクリプトを実行
* Novaでインスタンスを初回ブートする時に実行

　インスタンスへの固定IPの設定は初回ブート時に必要な作業なので、scripts-per-instanceを利用する。以下のとおり、スクリプトを配置します。
# cd /var/lib/cloud/scripts
# tree `pwd`
/var/lib/cloud/scripts
├── per-instance
│   └── per-instance.sh

　スクリプトの中身は以下のとおりです。
# cat per-instance.sh
#!/bin/bash
/root/bootstrap/networking.py
/root/bootstrap配下に固定IPを設定するためのPythonスクリプトを配置します。
# cd /root/bootstrap
# tree `pwd`
/root/bootstrap
├── lib
│   ├── __init__.py
│   ├── cmd_args.py
│   ├── exception.py
│   ├── gateway.py
│   ├── ip_addr.py
│   └── util.py
└── networking.py

　処理の流れとしては、config_driveをマウントし、ipconfigコマンド、routeコマンドを使いIP設定を行い、最後にconfig_driveをアンマウントするという流れです。当然、次回リブートすると設定は消えてしまうので、ブート後ネットワークの設定ファイルを修正する必要がありますが、このスクリプトにより初回ブート時に自動でsshできるようになります。Pythonスクリプトの中身は以下のとおりです。
